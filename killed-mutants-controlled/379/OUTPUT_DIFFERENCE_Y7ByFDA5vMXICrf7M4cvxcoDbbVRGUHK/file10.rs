#![allow(warnings, unused, unconditional_panic)]
use std::env;
use std::collections::hash_map::DefaultHasher;
use std::hash::{Hash, Hasher};
const CONST1: u16 = 3795u16;
const CONST2: u16 = 61218u16;
const CONST3: f32 = 0.42992425f32;
const CONST4: i32 = 584484917i32;
const CONST5: i128 = 119674149640372013108084907699997472924i128;
const CONST6: u8 = 61u8;
const CONST7: bool = true;
const CONST8: i128 = 114442961510486776808725882338614601208i128;
const CONST9: f64 = 0.32864346575144043f64;
const CONST10: u128 = 9335216580474516063816647835878942497u128;
macro_rules! reconditioned_mod{
    ($a:expr,$b:expr, $zero: expr) => {
        {
            let denominator = $b;
            if (denominator != $zero) {($a % denominator)} else {$zero}
        }
    }
}
#[derive(Debug)]
struct Struct1 {
var1: i64,
}

impl Struct1 {
 
fn fun7(&self, hasher: &mut DefaultHasher) -> () {
let mut var75: String = String::from("iiGsaHD9YzVjvBkZfK3PNCCqdpjqK5DineZPPxZFZ6u2HnZZsq05H7Kp2pfDD7M50Cn7gUwhU56Sn");
format!("{:?}", var75).hash(hasher);
let mut var76: Option<(String,f32)> = Some::<(String,f32)>((String::from("G9Z1YSZ9r8lej9I5gvdvqC7S5J0h9hZfO2JkW5HHn7iogkGKNnnG7G9IWXynLYqyANXSd0Q"),0.87056094f32));
var76 = Some::<(String,f32)>((String::from("b"),0.5800019f32));
let var77: u64 = 8029372340672437052u64;
-1107081293i32;
format!("{:?}", var77).hash(hasher);
1103404030i32;
fun8(hasher).push((Struct1 {var1: -6494384450385564718i64,}));
var76 = Some::<(String,f32)>((String::from("b6CcjXZgujpaqOwb0v4GWwF6jHSqIRJYcf1VfEShvlRhOQNEKvLSfoKsTWjNCQRTqAAnIb3F3Eqe6gacmEibIR8DAXwoEpqCvt"),0.8909076f32));
3683132179u32;
var76 = None::<(String,f32)>;
var76 = Some::<(String,f32)>((String::from("LUFY51GxNouJ6GV0i"),0.84281904f32));
format!("{:?}", var76).hash(hasher);
150474308489022154314350690338892141433i128;
let mut var88: u32 = 3809046740u32;
var88 = 3712265138u32;
1650500748u32;
format!("{:?}", var88).hash(hasher);
var88 = 79298101u32;
format!("{:?}", var77).hash(hasher);
let mut var95: usize = 13936366474180419473usize;
();
23775u16;
format!("{:?}", var77).hash(hasher);
}

#[inline(never)]
fn fun20(&self, var266: &&i64, var267: i32, hasher: &mut DefaultHasher) -> Vec<i128> {
format!("{:?}", var266).hash(hasher);
format!("{:?}", var267).hash(hasher);
let mut var268: Vec<bool> = vec![false,false,true,true];
var268 = vec![false,true,(false),true,false,false,false];
120919643339318539203116419195599875751i128;
var268 = {
let var269: i32 = 105535827i32;
29789i16;
();
format!("{:?}", var266).hash(hasher);
let mut var270: u128 = 45217634853877486496124645995157718721u128;
var270 = 157575553333354289421879729423452287890u128;
let mut var271: i32 = 591275039i32;
Box::new(2744759650657162638u64);
2889116293601260408i64;
format!("{:?}", var270).hash(hasher);
let var272: u32 = 91576622u32;
239175723u32;
1340608795u32;
let mut var274: String = String::from("GqYzC0m6wuwG94kVOFv");
39526705730938478983855138372208884275u128;
vec![179u8,103u8,28u8,246u8,39u8,107u8].push(31u8);
format!("{:?}", var271).hash(hasher);
var271 = 1119486445i32;
163646053899280065970364543459628564810u128;
var271 = -2105528447i32;
vec![false]
};
let var275: String = String::from("32T7");
let var276: u8 = 109u8;
format!("{:?}", var276).hash(hasher);
var268 = vec![false];
var268 = vec![false,false,false,true,false,true,true,true,true];
return vec![146704235715409200924609767783100168663i128,18456436634965486697975378644924772132i128,fun5(2008749727u32,false,-556834993i32,hasher)];
match (None::<f64>) {
None => {
format!("{:?}", var275).hash(hasher);
var268 = vec![false,false,false,true];
let var285: u16 = 23020u16;
();
54405688242362749802558820103372926252i128;
format!("{:?}", var266).hash(hasher);
format!("{:?}", var267).hash(hasher);
2519632179u32;
format!("{:?}", var267).hash(hasher);
59970u16;
15454285107357367297usize;
format!("{:?}", var276).hash(hasher);
142u8;
format!("{:?}", var267).hash(hasher);
64375u16;
return vec![117733799215370040146905579537221353010i128,111408074855593986506614697450487990224i128,6531047399697357554678632512734860656i128,77854140496989483941038590224526691780i128,41859466671250400360415617648300594619i128,67786366406686968325944329121783775274i128,141347773572363960392174621518421085948i128,72213001708250124917269073081026874231i128,154623542508587447953960286739703229494i128];
vec![38276464571065778691073979093694199244i128,72653282842371204603960505348439392929i128,22299596247769514020523492190966824943i128,71269569903977406421142631760697484766i128,13608804496716329882961149298279271983i128,1985816423982134329931100602215051186i128]},
 Some(var277) => {
let mut var278: Option<i32> = None::<i32>;
let var279: u16 = 19025u16;
(String::from("PIxmkRZ"),0.76817554f32);
let mut var280: u128 = 94087472976539005929277861256342228461u128;
let mut var281: u16 = 52177u16;
6535i16;
let var282: f32 = 0.6913515f32;
3939i16;
let mut var283: u8 = 71u8;
var268 = vec![false,false,true,true];
-7597515781055355618i64;
var268 = vec![true];
var283 = 79u8;
(vec![Struct1 {var1: -2409733477405844221i64,},Struct1 {var1: -7881190680336762398i64,}],vec![Struct1 {var1: 3164501173314673990i64,},Struct1 {var1: -9126139471747464641i64,},Struct1 {var1: -7453469807556457316i64,},Struct1 {var1: 1776490935310244206i64,},Struct1 {var1: 535224994384218303i64,},Struct1 {var1: 8456982101510180899i64,},Struct1 {var1: -7681808477876137968i64,},Struct1 {var1: 6359135589213567901i64,},Struct1 {var1: -1016220471929319371i64,}],29427i16,67i8);
218u8;
return vec![43834803150837066132967188847301216253i128,154712357871302576547352274710330148793i128,82615806696663664253571675574064422248i128,24697713116315843281095313146450831487i128,33656195111438242854082505882559485416i128,60366644112851725767217962748158868859i128];
vec![97025727744685451136440747368744189221i128,129250829499181866963669320470600357544i128,69129555862802997413117939905680999090i128,45275160287082227625662616180720183586i128,45313436033425243238627721946149839317i128,47233533864672459967935801646191232697i128]
}
}

}
 
}
#[derive(Debug)]
struct Struct2<'a4> {
var48: &'a4 mut usize,
var49: &'a4 i128,
var50: u32,
}

impl<'a4> Struct2<'a4> {
  
}
#[derive(Debug)]
struct Struct3 {
var98: u128,
}

impl Struct3 {
  
}
#[derive(Debug)]
struct Struct4 {
var134: u128,
var135: Box<i16>,
}

impl Struct4 {
 #[inline(never)]
fn fun19(&self, var250: i64, var251: u32, var252: (Vec<Struct1>,Vec<Struct1>,i16,i8), var253: bool, hasher: &mut DefaultHasher) -> Struct4 {
0.628798f32;
format!("{:?}", var252).hash(hasher);
Some::<Vec<bool>>(vec![true,false,true,true]);
let mut var259: u8 = 107u8;
0.4710353f32;
format!("{:?}", var250).hash(hasher);
format!("{:?}", var259).hash(hasher);
return Struct4 {var134: 6138602292991735300334090747266656356u128, var135: Box::new(8571i16),};
Struct4 {var134: 92524653355892235399446184138341418027u128, var135: Box::new(4045i16),}
}


fn fun11(&self, var171: u8, var172: f64, var173: Struct2, var174: u64, hasher: &mut DefaultHasher) -> Vec<usize> {
format!("{:?}", self).hash(hasher);
let mut var175: i64 = 942374406466939988i64;
let var176: i64 = 3725030240678895508i64;
var175 = var176;
format!("{:?}", var171).hash(hasher);
format!("{:?}", var176).hash(hasher);
0.618658f32;
let var177: (usize,u128,u64) = (vec![124946690462919825658552599090870651275u128,128642913170075192181942844123330929039u128,124501546190597310001992047002749263833u128,30700188922239761393499081414199117719u128,(76306091026664580296453417501590100439u128 ^ 117043799354203713095735329882039584442u128)].len(),17198427422658981311109169799400856008u128,18420280492016814215u64);
var177;
let mut var178: u32 = 1381788488u32;
&mut (var178);
let var179: i8 = 19i8;
var179;
let var180: bool = true;
let var181: i128 = 105204520636111980423241738308350733015i128;
fun2(var177.0,String::from("Vq9UUWkoBUsRyODCyOonBe"),var181,1779599950u32,hasher);
format!("{:?}", var179).hash(hasher);
var175 = 364574572162218677i64;
let var182: String = String::from("tpVC6WoEFHhSa4o2");
var182;
format!("{:?}", var174).hash(hasher);
true;
format!("{:?}", var180).hash(hasher);
let mut var287: i8 = 101i8;
let mut var288: Struct4 = Struct4 {var134: 142618029616142669348590258329455174299u128, var135: Box::new(27292i16),};
let var289: i128 = 148780996721172607830092601991259566220i128;
fun18(false,var287,var288,hasher).push(var289);
let var290: u8 = 87u8;
let var291: Vec<u128> = vec![66933255127115294811802015263935247325u128,130493357537590725218556299823572342483u128,151017360661877057464021268043965055695u128];
let var292: Option<(String,f32)> = fun21(None::<i128>,36076417994332872838844026229154364543i128,hasher);
return vec![var291.len(),var177.0,vec![var292].len(),var177.0];
vec![401760284547462376usize,17654219976004530534usize]
}
 
}
#[derive(Debug)]
struct Struct5<'a3> {
var187: u32,
var188: &'a3 String,
}

impl<'a3> Struct5<'a3> {
 #[inline(never)]
fn fun16(&self, hasher: &mut DefaultHasher) -> i128 {
format!("{:?}", self).hash(hasher);
let var225: f32 = 0.23683351f32;
let mut var226: u32 = 1377882769u32;
var226 = 2470864097u32;
var226 = 287354396u32;
let mut var227: Box<Vec<u128>> = Box::new(vec![6098923044934680587901622456530691877u128,63617385922835094830632097201613984247u128,56227749930691874864598835412884513850u128,47213542817994169923452691894274239434u128,143646555100588164412092485393994040602u128,155074774303820116058806394877160503900u128]);
format!("{:?}", var226).hash(hasher);
format!("{:?}", var227).hash(hasher);
format!("{:?}", self).hash(hasher);
format!("{:?}", self).hash(hasher);
return 152420216565746396631770746365931143236i128;
38556789297571908439367207992554503656i128
}
 
}
#[derive(Debug)]
struct Struct6<'a3> {
var192: Box<&'a3 mut u128>,
var193: u128,
}

impl<'a3> Struct6<'a3> {
 #[inline(never)]
fn fun13(&self, var194: u128, hasher: &mut DefaultHasher) -> i16 {
let var195: i8 = fun14(hasher);
vec![3945923674964610247usize,17809106761765329505usize,fun15(36932346965935004585303880423099630547u128,hasher).len(),12553523659939151484usize].len();
vec![Box::new(17265641653171894886u64),Box::new(15090006803154194327u64),Box::new(13271509130063813222u64),Box::new(9447476565454973170u64),Box::new(6910279615893793920u64)];
format!("{:?}", var195).hash(hasher);
();
let mut var209: i64 = 7275984489973208664i64;
var209 = -2361758680174884687i64;
let var210: usize = vec![false,false,false,true].len();
format!("{:?}", var194).hash(hasher);
15i8;
format!("{:?}", self).hash(hasher);
let var211: Box<i16> = Box::new(12055i16);
Box::new(5159823979600106903u64);
var209 = -2032809445721988573i64;
27520i16;
return 26506i16;
reconditioned_mod!(13348i16, 1339i16, 0i16)
}
 
}
#[derive(Debug)]
struct Struct7 {
var214: i8,
}

impl Struct7 {
  
}
#[derive(Debug)]
struct Struct8<'a3> {
var254: &'a3 mut i64,
var255: u64,
var256: i16,
var257: i32,
}

impl<'a3> Struct8<'a3> {
  
}
#[derive(Debug)]
struct Struct9 {
var261: f32,
var262: u8,
}

impl Struct9 {
  
}
#[derive(Debug)]
struct Struct10 {
var264: String,
}

impl Struct10 {
  
}
type Type1 = usize;
type Type2 = i64;

fn fun2( var17: usize, var18: String, var19: i128, var20: u32, hasher: &mut DefaultHasher) -> u32 {
let var21: i32 = -347207486i32;
format!("{:?}", var21).hash(hasher);
let mut var22: Struct1 = Struct1 {var1: -2515213991886913023i64,};
var22 = Struct1 {var1: -5267202528196286719i64,};
let var23: bool = false;
let var25: i8 = 48i8;
let mut var26: bool = false;
format!("{:?}", var26).hash(hasher);
let mut var28: u128 = 96742694880127382593234267783125986707u128;
var28 = 118541940433490547559559039534477646734u128;
0.3239099914827185f64;
Box::new(4437931266508522602u64);
0.2522818846985242f64;
format!("{:?}", var19).hash(hasher);
Some::<String>(String::from("fyTddFllrffF8o3CN1tNO2Sze6H"));
vec![Struct1 {var1: 6552999692840958722i64,},Struct1 {var1: 4029137543717407945i64,},Struct1 {var1: -3744240552192635172i64,},Struct1 {var1: -4702874180729476216i64,},Struct1 {var1: -1870055399203766456i64,},Struct1 {var1: -1335415601431019445i64,},Struct1 {var1: -6717432557335412454i64,},Struct1 {var1: 3114719410909897846i64,}].push(Struct1 {var1: 8620793451031237614i64,});
3163098949u32
}


fn fun3( var31: Option<String>, var32: Vec<i128>, var33: Option<String>, var34: u16, hasher: &mut DefaultHasher) -> Vec<u64> {
let mut var35: u16 = 18969u16;
var35 = 38094u16;
format!("{:?}", var33).hash(hasher);
Struct1 {var1: -8161135204360444085i64,};
format!("{:?}", var35).hash(hasher);
vec![false,true].len();
format!("{:?}", var35).hash(hasher);
var35 = 8082u16;
let mut var36: Struct1 = Struct1 {var1: 4556335326761478207i64,};
format!("{:?}", var36).hash(hasher);
let var38: i128 = 152784149173303985386375847956064597803i128;
format!("{:?}", var35).hash(hasher);
var35 = 6458u16;
let var39: u8 = 177u8;
format!("{:?}", var38).hash(hasher);
let var40: i8 = 16i8;
var35 = 25302u16;
let var41: bool = true;
format!("{:?}", var34).hash(hasher);
let mut var42: bool = true;
vec![12042378578265574027u64]
}

#[inline(never)]
fn fun4( hasher: &mut DefaultHasher) -> i32 {
Box::new(2376654184447916136u64);
let mut var45: usize = vec![(Struct1 {var1: 1155495266434676332i64,}),(Struct1 {var1: -8889494488916903628i64,}),Struct1 {var1: 4042774716257425752i64,},Struct1 {var1: 7929962832222190794i64,}].len();
var45 = vec![Struct1 {var1: 2629934951288076871i64,},Struct1 {var1: 8376306801485079727i64,},Struct1 {var1: -4059347108912985632i64,}].len();
format!("{:?}", var45).hash(hasher);
let mut var46: i64 = -4511274890225272994i64;
let var47: i128 = 50650719493886414183057333519854864929i128;
0.04586250836464678f64;
return 1448274778i32;
490585892i32
}

#[inline(never)]
fn fun5( var55: u32, var56: bool, var57: i32, hasher: &mut DefaultHasher) -> i128 {
format!("{:?}", var55).hash(hasher);
56342687465765172605816540833818548569i128;
format!("{:?}", var55).hash(hasher);
let mut var58: f32 = 0.5765524f32;
var58 = 0.5385666f32;
vec![Struct1 {var1: -4686243503680158299i64,},Struct1 {var1: 4414003621667305459i64,}].push(Struct1 {var1: 1494668839163607965i64,});
17982i16;
8666006836064189093usize;
vec![vec![6770346552482077714u64,12200412978365417043u64,11041982594610577966u64,14897886671151823399u64].len(),vec![70413153498451813953479360508809450685i128].len(),vec![true,false,false,true].len(),14069131324324540514usize,15827389430362701991usize].push(2585693988212542199usize);
1556666702i32;
let mut var60: i64 = 8272308993144255272i64;
106277870452949482414885525040993421580i128;
Struct1 {var1: -3414340934155316169i64,};
162u8;
var58 = 0.13719052f32;
vec![42509134867051510367400466023228385416i128,62009284952465520348411542583268906357i128,11858268779650010107773159227532114647i128,16607951017265996581132617235967058500i128,43890924388364086667210651147124844015i128,48836689146525946041141638541251320817i128,148766567253288321757546165747769655569i128,103335898733361031044300133269572167232i128,83974277741565957641245292942747137912i128];
Box::new(7375i16);
var58 = 0.45992345f32;
vec![16490705025851309653u64].push(18370756637765407448u64);
false;
2255446704u32;
let mut var61: u32 = 1786566920u32;
47344331062374119737865531918387777715i128
}

#[inline(never)]
fn fun6( var68: Struct1, var69: &mut Vec<Struct1>, var70: usize, hasher: &mut DefaultHasher) -> u8 {
(*var69) = vec![Struct1 {var1: 7380750337430704534i64,},Struct1 {var1: 9063026923348579660i64,},Struct1 {var1: 7541487683521223506i64,},Struct1 {var1: -4488284156818339030i64,},Struct1 {var1: (1500762419361096378i64 | -1384204733460616040i64),},Struct1 {var1: -8580384682344958583i64,},Struct1 {var1: 1174870348885076023i64,},Struct1 {var1: 3867862275110745744i64,}];
(*var69) = vec![Struct1 {var1: 3951600931023028306i64,},Struct1 {var1: 4506715050123849182i64,},Struct1 {var1: 2879591087786046767i64,},Struct1 {var1: 2076517147987109944i64,},Struct1 {var1: {
return 37u8;
-2849139747622316774i64
},}];
return 207u8;
1u8
}

#[inline(never)]
fn fun8( hasher: &mut DefaultHasher) -> Vec<Struct1> {
let var79: i128 = 77301348373954436525848686929838660496i128;
vec![138408839251764012115744753692100563606i128,146219379352997684378477981287267477807i128,129666053974362496931519364187836295455i128,65426931461597372648435264035232966015i128,56334144257764530318006275261574837525i128,164804343596621674047797244693044697041i128,18395993791738170959624556888912280493i128,22642168567168635722508822425016719540i128,120902443892446573566791830414615734877i128].len();
0.4489286f32;
53402315161336211340270344105739694061i128;
format!("{:?}", var79).hash(hasher);
(String::from("xZFw"),0.45041835f32);
42242u16;
format!("{:?}", var79).hash(hasher);
2467589164u32;
format!("{:?}", var79).hash(hasher);
3207533144u32;
let mut var80: Vec<bool> = vec![true,false,true,true,false,true];
var80 = vec![false,true,false,true,true,true,true,false,true];
14173i16;
var80 = vec![true,true];
vec![26773875310787481029341568656734058245i128,79594792845019044449382340963104278428i128,164666905635136820542037509061529250133i128];
1620411316488357629u64;
();
var80 = vec![true,true,true,true];
vec![144104048996533073013592854506840079107i128,45384656688594416901327651227550781446i128,132589509089987607206719077187007391250i128,6546683240654030064493808018730939936i128].len();
false;
String::from("ELkbNyoV91fFEx3k45XZStQl2fyIMH9GQl0cric00Qrq6");
let var83: usize = 13378098340395513440usize;
vec![Struct1 {var1: -1398834083637245338i64,},Struct1 {var1: -2044376820873758080i64,},Struct1 {var1: -4839170459012878863i64,}]
}


fn fun9( var89: Box<i128>, var90: i64, var91: usize, hasher: &mut DefaultHasher) -> usize {
format!("{:?}", var91).hash(hasher);
2109778432916898536usize;
return vec![true,true,true].len();
vec![21104101746415806260519295793019015225i128,161688204555429470852737856662759287349i128,115895605763516837678543043659182395001i128,89705946949686954087065635783154283380i128,105007526841998653764297952574288045306i128,146457633720493572003404910771225798875i128,25977309307257558217528348651718997729i128].len()
}

#[inline(never)]
fn fun10( var119: u32, hasher: &mut DefaultHasher) -> Vec<bool> {
let var121: i16 = 11101i16;
let mut var120: i16 = var121;
var120 = 4355i16;
let var122: bool = false;
let var124: Box<i128> = Box::new(79402961365629456497095782269737875506i128);
let var123: Box<i128> = var124;
let var125: i128 = 123649237514020386877818905159607425259i128;
var125;
var120 = 23005i16;
format!("{:?}", var123).hash(hasher);
format!("{:?}", var120).hash(hasher);
var120 = 9306i16;
let var126: i32 = 970692967i32;
(214580059i32 < var126);
let var128: u128 = 160931973964715658403246060929008556170u128;
let var127: u128 = var128;
let var129: i8 = 69i8;
let var130: u16 = 17892u16;
var130;
var120 = 1405i16;
let var131: u32 = 1042778336u32;
var131;
let var132: u128 = 98717817724391764662645674290125376745u128;
var132;
var120 = 25237i16;
let mut var133: bool = true;
39311u16;
var120 = 14031i16;
let var142: bool = false;
if (var142) {
 let var137: u128 = 122556170424637364725580113845894182652u128;
let mut var136: Struct4 = Struct4 {var134: var137, var135: Box::new(8512i16),};
let var138: Box<i16> = Box::new(20397i16);
var136 = Struct4 {var134: 73754845368608536678444071428843712444u128, var135: var138,};
format!("{:?}", var128).hash(hasher);
var120 = var121;
3172017552u32;
22112u16;
let var139: bool = true;
let var140: bool = true;
return vec![var139,var140,true];
let var141: Vec<bool> = vec![false,true,true,true,false,false,true];
var141 
} else {
 var133 = false;
format!("{:?}", var142).hash(hasher);
var120 = 31130i16;
var120 = (18399i16 | var121);
var133 = true;
false;
format!("{:?}", var142).hash(hasher);
();
let var146: i128 = 137198656937864435493870331734232881254i128;
let var145: i128 = var146;
let mut var147: i128 = 93248999171930919099569360899232774178i128;
24240u16;
let mut var148: Vec<u128> = vec![19414969412370306117367492428955275837u128,60786015694730915497772628416262871150u128];
let var149: u128 = 139646005539313593736678299969250282702u128;
var148.push(var149);
let mut var150: u64 = 4476280852590575685u64;
format!("{:?}", var142).hash(hasher);
format!("{:?}", var122).hash(hasher);
format!("{:?}", var131).hash(hasher);
vec![true] 
}
}


fn fun12( var185: u128, hasher: &mut DefaultHasher) -> i64 {
false;
format!("{:?}", var185).hash(hasher);
0.80240256f32;
-814741512i32;
Some::<Vec<bool>>(vec![false]);
true;
vec![false,true,true,false,true,true,true,true,true].push(true);
24100894243986878491070394747812188356u128;
(1065531159132498348usize,112152455545440902653923399841310471010u128,1074444382274915365u64);
43955951943765075919183265192219378123i128;
let mut var190: Option<(String,f32)> = None::<(String,f32)>;
let mut var191: (Vec<Struct1>,Vec<Struct1>,i16,i8) = (vec![Struct1 {var1: -5875503788213979105i64,},Struct1 {var1: 3491031114998490360i64,}],vec![Struct1 {var1: 6960679025334270731i64,},Struct1 {var1: -5450019900694188911i64,},Struct1 {var1: -6788680134360588525i64,},Struct1 {var1: -8576246630998655202i64,},Struct1 {var1: -966598107950482303i64,},Struct1 {var1: 1449748165212612504i64,},Struct1 {var1: 8208950135497317978i64,},Struct1 {var1: -2936683918022436525i64,}],5471i16,69i8);
-230442725i32;
format!("{:?}", var190).hash(hasher);
var191 = (vec![Struct1 {var1: 951768019764789917i64,},Struct1 {var1: 4473595926287973144i64,},Struct1 {var1: -797231670952433447i64,},Struct1 {var1: 1226170078735246269i64,},Struct1 {var1: 8211951218336568645i64,},Struct1 {var1: -6080558312972230184i64,},Struct1 {var1: -5457198902956080798i64,}],vec![Struct1 {var1: -5867877204819609756i64,}],5062i16,16i8);
format!("{:?}", var185).hash(hasher);
-6386166924562260452i64
}

#[inline(never)]
fn fun14( hasher: &mut DefaultHasher) -> i8 {
let mut var196: u16 = 26529u16;
format!("{:?}", var196).hash(hasher);
24667i16;
0.9778691f32;
format!("{:?}", var196).hash(hasher);
let mut var197: Vec<i128> = vec![62490523242578497099501098729136801373i128,149271044957229012918898201046420054605i128,44638175100435389463358345752292019721i128,1021470539394352176663172736461667306i128,2780861656181913592832911682304939603i128,74038313793339373172621487488539466894i128];
3849252552u32;
var196 = 5193u16;
let mut var198: i32 = -1440869732i32;
let mut var199: i32 = 1872679077i32;
9870625653800952791usize;
let var201: (Option<f64>,Option<(String,f32)>,bool,u128) = (Some::<f64>(0.58776120537707f64),None::<(String,f32)>,true,29438832296785882149464279061361393794u128);
format!("{:?}", var201).hash(hasher);
18082u16;
format!("{:?}", var196).hash(hasher);
return 90i8;
116i8
}


fn fun15( var204: u128, hasher: &mut DefaultHasher) -> Vec<usize> {
let mut var206: i64 = 2810088438474683910i64;
let mut var207: i32 = -1152220874i32;
81u8;
var207 = -262023347i32;
let var208: bool = true;
return vec![1797768532409956096usize];
vec![9809917904804635716usize,13523578423381657288usize,vec![Box::new(12822417900239311320u64),Box::new(9175670671702780828u64),Box::new(9723094172479065202u64),Box::new(9625008727395039409u64),Box::new(17485345544045141u64),Box::new(11262366287522548101u64),Box::new(778425303256722360u64),Box::new(13788981796599503760u64),Box::new(15141921728589920970u64)].len(),vec![Box::new(2182031741797484094u64),Box::new(2455144302346269808u64)].len(),10258810793786129200usize,4296842059037619756usize,12726604098927614316usize,17382118729891340137usize]
}


fn fun17( var237: usize, var238: f64, hasher: &mut DefaultHasher) -> Vec<Option<(String,f32)>> {
();
0.26579905017540206f64;
let mut var239: u64 = 8986757001355274686u64;
return vec![None::<(String,f32)>,Some::<(String,f32)>((String::from("NdFMGKnnv1godMsnxA9LULbsehpF2L005QvqJvWxiI4T7xHog3p8iNCtHWTI562bb9LyfoJ34AfVILzyaxVB"),0.5575134f32)),Some::<(String,f32)>((String::from("45UBWFTA47sEW6qVrOBb7fmjxBKb0KOOsW6VK4cVt2sTWpFtYttG4xm362NG53l2ZvVmFxxgQ1K"),0.6610567f32)),None::<(String,f32)>,Some::<(String,f32)>((String::from("NnaPqGcCITBwXMMAn39nO15ENisYccX81kF"),0.7292228f32)),None::<(String,f32)>,None::<(String,f32)>,None::<(String,f32)>,Some::<(String,f32)>((String::from("8nf1rqCj1BcNYV7vITGUr4OAYTWUZfHCOhEF2Wcn2Me4StedsURb925tfqfUpZLdfFfKjUypqKSycoKn3mrgHr5dnYE8uM1"),0.35416424f32))];
vec![None::<(String,f32)>]
}


fn fun18( var244: bool, var245: i8, var246: Struct4, hasher: &mut DefaultHasher) -> Vec<i128> {
let mut var247: i8 = 116i8;
let mut var248: u16 = 49710u16;
let var249: u16 = 28634u16;
67556806020762676426085465342710274825i128;
String::from("yJ28fava6D1FWCwCmfRYPRtx5NfgblJxLvuMa1FIuLj267bmVNU0TJsbgPoJMJS1l7a2RO3U7Ieag27QOb6");
Struct4 {var134: 56789596653910497996635583451830506894u128, var135: Box::new(7005i16),}.fun19(-3353605646869739630i64,659322859u32,(vec![Struct1 {var1: 289022194360612989i64,},Struct1 {var1: 4058990204065879583i64,},Struct1 {var1: 8890571919055305042i64,},Struct1 {var1: 3007970696973708748i64,},Struct1 {var1: 886442232018394720i64,}],vec![Struct1 {var1: 8170298500711766715i64,},Struct1 {var1: -1696605162291382833i64,},Struct1 {var1: 2721227245317460586i64,}],29062i16,32i8),false,hasher);
let var260: i16 = 28924i16;
165013673304209188646942989419452183804i128;
let var263: Struct9 = Struct9 {var261: 0.7961266f32, var262: 175u8,};
(vec![Box::new(2982537142755628201u64),Box::new(14660396662599013138u64)].len(),85994587194389403073191258912081377944u128,861661266670015690u64);
Box::new(33597726703874102015811918836292713028u128);
Struct3 {var98: 10757720921559731015408314439970902355u128,};
let var265: Option<Struct10> = None::<Struct10>;
var247 = 122i8;
format!("{:?}", var245).hash(hasher);
();
var247 = 15i8;
vec![154816396084286951972525356694440316458i128,126835860804856055797383888445545251394i128,54976977252992576089763943796681316612i128]
}

#[inline(never)]
fn fun21( var293: Option<i128>, var294: i128, hasher: &mut DefaultHasher) -> Option<(String,f32)> {
String::from("Ffiej1NRwz");
(None::<f64>,Some::<(String,f32)>((String::from("ujw"),0.35431117f32)),false,139968072708913519540386300091934358950u128);
let mut var295: u64 = 5502921480620774582u64;
9596454098121271013usize;
format!("{:?}", var295).hash(hasher);
format!("{:?}", var293).hash(hasher);
format!("{:?}", var294).hash(hasher);
String::from("YkI7JPWZC7md65NVfeguFxahx4AYz7PG25XmsyQDiifACCtrkHqhzWPQno7xJ6mF7Gn4wPqJzhWB6MPxCGivnrffboGVtOs");
330888752697466682i64;
2380336635u32;
var295 = 3944610937986427381u64;
24301u16;
139600811991152977233480679533029958690u128;
var295 = 12275907595907753711u64;
-890376310i32;
Some::<(String,f32)>((String::from("HMEKYullL6OmYUrIabQUPaBE1QqwORfuBD"),0.77560085f32))
}

#[inline(never)]
fn fun22( var319: Type2, hasher: &mut DefaultHasher) -> Box<i32> {
format!("{:?}", var319).hash(hasher);
false;
114363909344004455379414510123126968123i128;
format!("{:?}", var319).hash(hasher);
96i8;
1939588504i32;
format!("{:?}", var319).hash(hasher);
let mut var321: f64 = 0.7290439551553735f64;
var321 = 0.6381941125307354f64;
var321 = 0.07921197128414348f64;
let mut var322: u16 = 63257u16;
0.7675129408068952f64;
var321 = 0.28786039452722245f64;
576i16;
vec![vec![134617402796052546644288910276843211189i128,61998878697811660571910794424102414961i128,124888788683809257662194853008378885916i128.wrapping_mul(72673739383259519465621971794484854353i128)],vec![127843960484757749566988183564222562575i128,match (Some::<String>(String::from("q9zETNvVQxlCE2DjPeTASL57QDUH"))) {
None => {
var321 = 0.3774144143598889f64;
();
let var328: (Option<f64>,Option<(String,f32)>,bool,u128) = (Some::<f64>(0.8004679367629128f64),None::<(String,f32)>,false,30487756806617703571095613906037885165u128);
var322 = 31157u16;
();
(8998005199990133596usize,105505141806665994208663887516470965082u128,18065865948490088751u64);
return Box::new(113384753i32);
161361228272187804087631021978425169150i128},
 Some(var323) => {
0.05240480293796568f64;
let var324: i64 = -1261477306378678188i64;
var321 = 0.934182622670425f64;
var321 = 0.971422349370647f64;
3085925750u32;
let var325: usize = 13081174607451049212usize;
format!("{:?}", var325).hash(hasher);
9021602168756816513usize;
Struct1 {var1: -5724072454342168778i64,};
format!("{:?}", var324).hash(hasher);
let var326: Struct4 = Struct4 {var134: 23520747270005547978754969141986918015u128, var135: Box::new(31476i16),};
87312650586315574105446884775442216049u128;
vec![120392881919005263586080387616785733096u128,51233170835712930640420286512684242647u128,168764296074107299913880451028311501383u128];
var321 = 0.820788565713436f64;
132u8;
58i8;
format!("{:?}", var323).hash(hasher);
return Box::new(562121984i32);
98155025721979956382344673936400757044i128
}
}
,30058516128740434718210385225448447863i128,109229851281364563313534562752789603622i128,144918088371245048856902561274592408280i128],(vec![159107880233848461135639734757753493982i128,151908154521778399911573057288160704913i128,48291519653857165521941273827932411283i128,141848950412556147379624658253336911827i128]),vec![129659348355152465726222335767807384141i128,7767421001270781608606773214166812738i128,157884780042626670875222258297064845705i128,120567540725073569417745162987188928400i128,103831816901080406764393506164846098703i128,103226274916735841636893077591976225059i128,22280197964683984767954906897011402171i128,153102607017926384620286827213968018317i128,95407792253941739727332427612001394045i128],vec![22665494353509905442058695673024173404i128,43327219477716729104526827256936046639i128,152342308273605500594321547244650611424i128,61981424602355655524618643837583150930i128],vec![92032738257938625189450084271780330338i128],vec![162203537003284846280744542889607291477i128,83849249311773160496692360838205875652i128,25208954743461875417688024537420428883i128,10175261779634437705166851477513267243i128,117304925520480726348762735284542028457i128,6585445521563469619371915663817528830i128,140237255073221352913227199325994678342i128,53873721340842191283622809946435616720i128]].push(vec![69952578182139058057710816057812539891i128,126124211882956125316317278546479685575i128,54530161287646082461346055197274862349i128,162606664906555913568269338235985749153i128,19596553386266505495592877689679275710i128]);
let mut var329: f64 = 0.37515399964386886f64;
let var330: bool = true;
let var331: i16 = 32555i16;
var321 = 0.4049313202248067f64;
Box::new(-1751315600i32)
}


fn fun23( var335: usize, var336: i16, var337: i128, var338: u64, hasher: &mut DefaultHasher) -> bool {
format!("{:?}", var335).hash(hasher);
9257140294368287330u64;
String::from("1v4kcSWdC0WpCADvzBupuOnTwBzbrRLO9klp6UVXScK5ppgiXZUlz0");
let mut var339: i128 = 3014540731936337788566727106671866186i128;
var339 = 130230378376953916406910094553259604049i128;
6951i16;
let var340: String = String::from("9g");
let var341: usize = 7418450159012942402usize;
var339 = 1740339485786263633165036260141010833i128;
var339 = 19753412642367152682128026733246841272i128;
vec![15358439248469209606usize,vec![Box::new(9881653464197935715u64)].len(),14024708377509846134usize,2184441304667518239usize,14580991526602036262usize,17492672373846928198usize].push(12873639685941854628usize);
format!("{:?}", var339).hash(hasher);
format!("{:?}", var337).hash(hasher);
var339 = 109735859072789981536399041336833347055i128;
();
String::from("hfQT0Sg42IC673jPFjzYLOZ9qAXffYgOtrdYfWZ6aMsdvoDfYLsOeIjP67NgEHU");
var339 = 166841362989292185903385532778129279354i128;
true
}

#[inline(never)]
fn fun24( var345: Box<i128>, var346: usize, var347: u16, hasher: &mut DefaultHasher) -> () {
let var349: f32 = 0.6790218f32;
let mut var348: f32 = var349;
var348 = 0.8130219f32;
var348 = var349;
let var350: i64 = 4589480439801803825i64;
var350;
let var352: i8 = 60i8;
let var351: i8 = var352;
let var353: u64 = 16248704770063876060u64;
var353;
let var354: usize = vec![95848896792305869854345038299270502854u128,120781932655297376894476201264124088737u128,164738503835649242180492286158752528469u128].len();
var354;
format!("{:?}", var353).hash(hasher);
format!("{:?}", var353).hash(hasher);
let var355: i128 = 57332310023716336254269203072420210053i128;
var355;
let var356: i128 = 151462610547942164926022863861778907102i128;
var356;
var348 = 0.5592739f32;
format!("{:?}", var354).hash(hasher);
let var358: Box<i16> = Box::new(9233i16);
let var357: Box<i16> = var358;
212u8;
var348 = CONST3;
}


fn fun25( var372: Option<String>, hasher: &mut DefaultHasher) -> Struct1 {
-32845581i32;
12281806729208638627u64;
format!("{:?}", var372).hash(hasher);
let mut var374: f32 = 0.822188f32;
var374 = 0.8173746f32;
return Struct1 {var1: -4646837758885399647i64,};
Struct1 {var1: -4189584324918711543i64,}
}

#[inline(never)]
fn fun1( hasher: &mut DefaultHasher) -> usize {
let mut var13: u128 = match (Some::<f64>(0.9687092185135917f64)) {
None => {
let mut var65: u32 = 346786792u32;
format!("{:?}", var65).hash(hasher);
var65 = 4162637123u32;
16100846361632277507usize;
let var67: i64 = if (true) {
 Some::<String>(String::from("jMARO15YhIRFL8VVyllhtLv8HXDA9WMgW"));
format!("{:?}", var65).hash(hasher);
vec![112311949655507866967889048463940669773i128,fun5(2695600616u32,true,-1347288991i32,hasher)].push(49096886806663181709143829200290625540i128);
91146252753903952673445797863143333599u128;
46u8;
var65 = 3301995280u32;
vec![265710217457003042usize].len();
let var72: bool = true;
var65 = 1664334380u32;
let var74: i64 = 2504610032394140318i64;
Struct1 {var1: -2971078921326160338i64,}.fun7(hasher);
vec![11786634527167918504u64,13868289474181177094u64,10991724249284584489u64,11070574037060744898u64,7945583668017422997u64.wrapping_mul(15367140969565244483u64),9139317612075427701u64];
format!("{:?}", var65).hash(hasher);
var65 = 1815579411u32;
Struct1 {var1: -6391756846230168518i64,};
var65 = fun2(16764524566885481237usize,String::from("I2w0vTXRyEnQNLadrRZWNmk42qnKtPwDV"),152968494695205241431143137608467988940i128,1237992783u32,hasher);
format!("{:?}", var72).hash(hasher);
1727669043640480321i64 
} else {
 Some::<String>(String::from("jMARO15YhIRFL8VVyllhtLv8HXDA9WMgW"));
format!("{:?}", var65).hash(hasher);
vec![112311949655507866967889048463940669773i128,fun5(2695600616u32,true,-1347288991i32,hasher)].push(49096886806663181709143829200290625540i128);
91146252753903952673445797863143333599u128;
46u8;
var65 = 3301995280u32;
vec![265710217457003042usize].len();
let var72: bool = true;
var65 = 1664334380u32;
let var74: i64 = 2504610032394140318i64;
Struct1 {var1: -2971078921326160338i64,}.fun7(hasher);
vec![11786634527167918504u64,13868289474181177094u64,10991724249284584489u64,11070574037060744898u64,7945583668017422997u64.wrapping_mul(15367140969565244483u64),9139317612075427701u64];
format!("{:?}", var65).hash(hasher);
var65 = 1815579411u32;
Struct1 {var1: -6391756846230168518i64,};
var65 = fun2(16764524566885481237usize,String::from("I2w0vTXRyEnQNLadrRZWNmk42qnKtPwDV"),152968494695205241431143137608467988940i128,1237992783u32,hasher);
format!("{:?}", var72).hash(hasher);
1727669043640480321i64 
};
let mut var66: i64 = var67;
format!("{:?}", var66).hash(hasher);
let var99: Struct3 = Struct3 {var98: 15880197744406072533184337613621166113u128,};
format!("{:?}", var67).hash(hasher);
let var100: u16 = 37256u16;
let var101: i128 = 144411020952345529510787036446629560i128;
let var102: i32 = 568966047i32;
vec![109168861277540056159034437456717265130i128,154281511267716042608303862527416666530i128,var101,fun5(3547543119u32,false,var102,hasher),115331038134209141530229595215580275106i128];
var66 = var67;
let mut var103: i128 = 152837513605272927714538845888290550253i128;
let var105: i16 = 4070i16;
let var104: i16 = var105;
let var106: f32 = 0.102840126f32;
var106;
var65 = 3330829845u32;
let var107: bool = true;
var107;
let var108: i64 = -4452937359487056372i64;
var108;
format!("{:?}", var99).hash(hasher);
let var109: u128 = 49457307215995659520349407594097590776u128;
var109},
 Some(var14) => {
let var16: u32 = fun2(vec![84414686436185477545213463780665942327i128,74025116543744036075648953566684408112i128,66316609249892120268161471361119376599i128,74781474542177797414459202906299514991i128].len(),String::from("0zdPH4bV2khwhSdgO6TVfyxWDrSANQ0b04fT4l3bZRo47UT0"),143618295492833352686766241654017049616i128,1991159350u32,hasher);
let mut var15: u32 = var16;
let var29: u32 = 3750268096u32;
var15 = (*&(var29));
0.2058285105812816f64;
let var30: usize = fun3(None::<String>,vec![141055412263997023521484550174257034931i128,162776067308412787172896020807281656101i128,82454165960582629120489241060738535274i128,27826889703314691772415414797437476935i128,113025740536126075991660857830975465425i128],Some::<String>(String::from("ZwcAVHIMD62fdyLV5EayDwTsVKKXFq0PAh6AZ2ps5saoAwqPB3wbZZLZiRP0krYM")),40364u16,hasher).len();
var30;
let var43: i32 = fun4(hasher);
var43;
var15 = var16;
var15 = 3560772955u32;
var15 = 571060206u32;
86u8;
var15 = 2972421830u32;
None::<(String,f32)>;
format!("{:?}", var14).hash(hasher);
63268u16;
let var64: u64 = 4766947662121155881u64;
let var63: u64 = var64;
format!("{:?}", var16).hash(hasher);
var15 = var16;
8140166740929393620095638112702964537u128
}
}
;
let var12: Box<&mut u128> = Box::new(&mut (var13));
let var11: Box<&mut u128> = var12;
let mut var110: f32 = 0.30430204f32;
let var111: f32 = 0.9269244f32;
var110 = var111;
let var114: i8 = 121i8;
let var113: i8 = var114;
let var112: i8 = var113;
var112;
let mut var117: Box<i128> = Box::new(84871133670480155485746926707266147631i128);
let var116: &mut Box<i128> = &mut (var117);
let var151: u32 = 1227878330u32;
let var118: usize = fun10(var151,hasher).len();
let mut var153: Box<i128> = Box::new(152319149164839915398085541168491776636i128);
let var152: &mut Box<i128> = &mut (var153);
let var115: (usize,&mut Box<i128>) = (var118,var152);
format!("{:?}", var114).hash(hasher);
let var154: u16 = 60882u16;
87408826464763521436383130937000955869i128;
0.9916361790925186f64;
format!("{:?}", var115).hash(hasher);
let var157: Box<i128> = Box::new(CONST8);
let var156: Box<i128> = var157;
let var155: Box<i128> = var156;
(*var116) = var155;
(*var116) = Box::new(CONST5);
let var160: Box<i128> = Box::new(104628602526023272334816333357501893724i128);
let var159: Box<i128> = var160;
let var158: Box<i128> = var159;
(*var116) = var158;
let var162: i128 = 69048739119566366521499321924542691690i128;
let var161: i128 = var162;
(145252857781982202210224551791870360220i128 ^ var161);
(*var116) = Box::new(124987984079510260993914149363534589398i128);
let var344: u8 = {
format!("{:?}", var116).hash(hasher);
true;
59330u16;
format!("{:?}", var112).hash(hasher);
fun24(Box::new(137545285648058943768471821909575519649i128),1678058119094133005usize,60475u16,hasher);
format!("{:?}", var162).hash(hasher);
let var359: Option<i16> = Some::<i16>(16033i16);
var359;
var110 = 0.80176497f32;
117977384155144201779819304035253204322i128;
let var360: bool = true;
var360;
let mut var364: u128 = 42982916621180034716054497400522421485u128;
let mut var363: &mut u128 = &mut (var364);
136957969027559945440992973942491529470u128;
let var368: i64 = -1246030718956322128i64;
var368;
format!("{:?}", var113).hash(hasher);
132894322628174646624006894148499875893i128;
let var370: f32 = 0.45218158f32;
(*var363) = 28356198268880589225707446239463938719u128;
let var371: Struct1 = fun25(Some::<String>(String::from("5G4DEiY4A3R3bjP54vyQ69DExy20RRSrwGZwKhPhgfvjG0VmnArzYeznE6A36YVCP3JqWEQuAlUMGiiwS4qxDM3FR6dmEQ1xJ")),hasher);
let var375: Struct1 = Struct1 {var1: 8289812674023493625i64,};
let var376: i64 = -1257888583155249563i64;
Box::new(vec![var371,var375,Struct1 {var1: var376,},Struct1 {var1: -3965776393187905662i64,}].len());
let var377: u8 = 234u8;
var377
};
let var343: u8 = var344;
&(var343);
let var380: i16 = 16510i16;
let var379: i16 = var380;
let mut var378: i16 = var379;
let var382: u64 = 8028743611294346442u64;
let var381: u64 = var382;
var381;
format!("{:?}", var382).hash(hasher);
-1163602148i32;
let var384: usize = 16986298049885637584usize;
let var383: usize = var384;
var383
}


fn main( ) -> () {
let cli_args: Vec<String> = env::args().collect();
let mut s = DefaultHasher::new();
let hasher = &mut s;
let var9: u64 = 11381877985495871068u64;
let var8: u64 = var9;
let var7: u64 = var8;
let var6: u64 = var7;
let var5: u64 = var6;
let var4: u64 = var5;
let var3: u64 = var4;
let mut var2: u64 = var3;
let mut var10: i64 = cli_args[1].clone().parse::<i64>().unwrap();
fun1(hasher);
let var385: u64 = 3732817953255619741u64;
var385;
var2 = (var6 ^ 5868138104439323864u64);
cli_args[2].clone().parse::<u16>().unwrap();
var2 = cli_args[3].clone().parse::<u64>().unwrap();
let var388: String = cli_args[5].clone().parse::<String>().unwrap();
let var390: u32 = 3758382023u32;
let var389: u32 = var390;
let var387: u32 = fun2(cli_args[4].clone().parse::<usize>().unwrap(),var388,55740395647269417525722203413707417980i128,var389,hasher);
let var386: &u32 = &(var387);
var386;
let var391: u16 = 25303u16;
var391;
();
var2 = 7835874194600747174u64;
let var394: u16 = cli_args[2].clone().parse::<u16>().unwrap();
let var393: u16 = var394;
let var392: u16 = var393;
var392;
let mut var396: i128 = 65560191512110351245347560053641415998i128;
let var395: &mut i128 = &mut (var396);
var395;
format!("{:?}", var385).hash(hasher);
var10 = 6457784493604049066i64;
format!("{:?}", var393).hash(hasher);
let mut var397: u64 = cli_args[3].clone().parse::<u64>().unwrap();
var2 = cli_args[3].clone().parse::<u64>().unwrap();
format!("{:?}", CONST1).hash(hasher);
format!("{:?}", CONST10).hash(hasher);
format!("{:?}", CONST2).hash(hasher);
format!("{:?}", CONST3).hash(hasher);
format!("{:?}", CONST4).hash(hasher);
format!("{:?}", CONST5).hash(hasher);
format!("{:?}", CONST6).hash(hasher);
format!("{:?}", CONST7).hash(hasher);
format!("{:?}", CONST8).hash(hasher);
format!("{:?}", CONST9).hash(hasher);
format!("{:?}", var10).hash(hasher);
format!("{:?}", var2).hash(hasher);
format!("{:?}", var3).hash(hasher);
format!("{:?}", var385).hash(hasher);
format!("{:?}", var386).hash(hasher);
format!("{:?}", var389).hash(hasher);
format!("{:?}", var390).hash(hasher);
format!("{:?}", var391).hash(hasher);
format!("{:?}", var392).hash(hasher);
format!("{:?}", var393).hash(hasher);
format!("{:?}", var394).hash(hasher);
format!("{:?}", var397).hash(hasher);
format!("{:?}", var4).hash(hasher);
format!("{:?}", var5).hash(hasher);
format!("{:?}", var6).hash(hasher);
format!("{:?}", var7).hash(hasher);
format!("{:?}", var8).hash(hasher);
format!("{:?}", var9).hash(hasher);
println!("Program Seed: {:?}", -2603929462590012140i64);
println!("{:?}", hasher.finish());
}
